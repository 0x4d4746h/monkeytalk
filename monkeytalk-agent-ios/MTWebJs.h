#define MTWebJsString @" if (MonkeyTalk == undefined || adapters == undefined) {\n var MonkeyTalk = {};\n \n // ------------------------------------------------------ \n // PLAYBACK \n // ------------------------------------------------------ \n MonkeyTalk.keys = [\"monkeyId\",\"id\",\"name\",\"value\",\"title\",\"className\",\"textContent\"];\n // MonkeyTalk.keys = [\"monkeyId\",\"id\",\"name\",\"value\",\"title\",\"className\",\"alt\",\"textContent\",\"src\",\"href\"]; \n \n MonkeyTalk.isIos = function() {\n var userAgent = window.navigator.userAgent;\n \n if (userAgent.match(/iPad/i) || userAgent.match(/iPhone/i)) {\n return true;\n }\n \n return false;\n };\n \n MonkeyTalk.monkeyIdMatchesElement = function(monkeyId, monkeyElement) {\n var keys = MonkeyTalk.keys;\n \n for (var i = 0; i < keys.length; i++) {\n var key = keys[i];\n \n if (monkeyId == monkeyElement[key])\n return true;\n }\n \n return false;\n };\n \n MonkeyTalk.getElement = function(elements, monkeyId) {\n var monkeyElements = new Array();\n \n for (var i = 0; i < elements.length; i++) {\n var element = elements[i];\n var monkeyElement = MonkeyTalk.monkeyElement(element);\n \n monkeyElements[i] = monkeyElement;\n \n console.log('find: ' + monkeyId + ' current: ' + monkeyElement[\"monkeyId\"]);\n \n if (MonkeyTalk.monkeyIdMatchesElement(monkeyId, monkeyElement)) {\n console.log('json: ' + JSON.stringify(monkeyElement));\n return JSON.stringify(monkeyElement);\n }\n }\n \n return null;\n };\n \n MonkeyTalk.getHtmlElement = function(elements, monkeyId) {\n var monkeyElements = new Array();\n \n for (var i = 0; i < elements.length; i++) {\n var element = elements[i];\n var monkeyElement = MonkeyTalk.monkeyElement(element);\n \n monkeyElements[i] = monkeyElement;\n \n if (MonkeyTalk.monkeyIdMatchesElement(monkeyId, monkeyElement)) {\n return element;\n }\n }\n \n return null;\n };\n \n MonkeyTalk.getCell = function(tableElements, tableId, cellId) {\n var table = MonkeyTalk.getHtmlElement(tableElements, tableId);\n var rows = table.getElementsByTagName('tr');\n \n for (var i = 0; i < rows.length; i++) {\n var element = rows[i];\n var monkeyElement = MonkeyTalk.monkeyElement(element);\n \n if (MonkeyTalk.monkeyIdMatchesElement(cellId, monkeyElement)) {\n console.log('json: ' + JSON.stringify(monkeyElement));\n return JSON.stringify(monkeyElement);\n }\n }\n \n return null;\n };\n \n MonkeyTalk.getRadioButton = function(radiobuttons, value) {\n console.log('radio count: ' + radiobuttons.length);\n console.log('value: ' + value);\n for (var i = 0; i < radiobuttons.length; i++) {\n var element = radiobuttons[i];\n var monkeyElement = MonkeyTalk.monkeyElement(element);\n \n if (value == element.value) {\n console.log('json: ' + JSON.stringify(monkeyElement));\n return JSON.stringify(monkeyElement);\n }\n }\n \n return null;\n };\n \n MonkeyTalk.getNthElement = function(elements, n, componentType) {\n var limitedElements = new Array();\n var offset = n - 1;\n \n for (var i = 0; i < elements.length; i++) {\n var e = elements[i];\n if (e.type != 'hidden')\n limitedElements[limitedElements.length] = e;\n }\n \n if (offset < 0)\n offset = 0;\n \n if (limitedElements.length > offset) {\n var element = limitedElements[offset];\n \n var monkeyElement = MonkeyTalk.monkeyElement(element);\n \n console.log('type: ' + monkeyElement[\"component\"]);\n \n if (componentType == monkeyElement[\"component\"]) {\n var json = JSON.stringify(monkeyElement);\n return json;\n }\n }\n \n return null;\n };\n \n MonkeyTalk.monkeyElement = function(element) {\n var monkeyElement = {};\n var adapter = adapters.getAdapterForElement(element);\n var mtc = adapter.getMTCommand(element, \"tap\");\n //console.log('element: ' + mtc.monkeyId); \n monkeyElement[\"monkeyId\"] = mtc.monkeyId;\n monkeyElement[\"component\"] = mtc.componentType;\n \n var rect = element.getBoundingClientRect();\n var x = rect.left + element.clientWidth/2;\n var y = rect.top + element.clientHeight/2;\n \n monkeyElement[\"id\"] = element.id != undefined ? element.id : null;\n monkeyElement[\"name\"] = element.name != undefined ? element.name : null;\n monkeyElement[\"tagName\"] = element.tagName != undefined ? element.tagName : null;\n monkeyElement[\"className\"] = element.className != undefined ? element.className : null;\n monkeyElement[\"value\"] = element.value != undefined ? element.value : null;\n monkeyElement[\"textContent\"] = element.textContent != undefined ? element.textContent : null;\n monkeyElement[\"type\"] = element.type != undefined ? element.type : null;\n monkeyElement[\"x\"] = parseInt(x);\n monkeyElement[\"y\"] = parseInt(y);\n monkeyElement[\"width\"] = parseInt(element.clientWidth);\n monkeyElement[\"height\"] = parseInt(element.clientHeight);\n monkeyElement[\"title\"] = element.title != undefined ? element.title : null;\n \n return monkeyElement;\n };\n \n // ------------------------------------------------------\n // COMPONENT TREE\n // ------------------------------------------------------\n \n MonkeyTalk.getComponentTreeJson = function() {\n //console.log(\"fetching component tree\");\n // wgxpath.install();\n var xpath = document.evaluate( \"/\", document, null, XPathResult.ANY_TYPE, null );\n if (xpath != undefined && xpath != null) {\n var rootNode = xpath.iterateNext();\n if (rootNode != null && rootNode != undefined) {\n var componentTreeObj= {};\n componentTreeObj[\"ComponentType\"]=\"HTMLDocument\";\n componentTreeObj[\"monkeyId\"]=\"\";\n componentTreeObj[\"className\"]=\"HTMLDocument\";\n // gets a JavaScript array object\n componentTreeObj[\"children\"] = MonkeyTalk.getComponentTreeJson2(rootNode);\n return JSON.stringify(componentTreeObj);\n }\n }\n return null;\n }\n \n MonkeyTalk.getComponentTreeJson2 = function(element) {\n // console.log(\"getComponentTreeJson2(element) ==> element=\" + element + \" with tagName=\" + element.tagName);\n var nodeItems = new Array();\n if (element != null && element != undefined) {\n var childNodes = element.childNodes; // node list\n if (childNodes != undefined && childNodes != null) {\n for (var i=0; i<childNodes.length; i++) {\n var node = childNodes.item(i);\n if (node != undefined && node != null) {\n var nodeType = node.nodeType;\n if (nodeType==1) {\n // it's an element\n if (node == element) {\n // in case of self-child links\n continue;\n }\n if (node.tagName.toLowerCase() != \"script\" && node.tagName.toLowerCase() != \"head\") {\n // ignore script elements\n nodeItems[nodeItems.length]=MonkeyTalk.getComponentTreeEntry(node);\n }\n }\n }\n }\n }\n }\n return nodeItems;\n }\n \n MonkeyTalk.getComponentTreeEntry = function(element) {\n var comp = new Object();\n comp[\"ComponentType\"] = \"View\";\n \n var identifyingValues = MonkeyTalk.getIdentifyingValues(element);\n var tagAdapter = adapters.getAdapterForElement(element);\n if (tagAdapter != undefined && tagAdapter != null) {\n var cmid = tagAdapter.mid(element,false);\n if (cmid != undefined && cmid!=null) {\n if (cmid.length > 25) {\n cmid = cmid.substring(0,25) + \"...\";\n }\n }\n comp[\"monkeyId\"] = cmid ? cmid : tagAdapter.ordinal(element);\n comp[\"ComponentType\"] = tagAdapter.componentType ? tagAdapter.componentType : \"View\";\n comp[\"ordinal\"] = tagAdapter.ordinal(element);\n }\n \n if (identifyingValues != undefined && identifyingValues != null && identifyingValues.length>0) {\n comp[\"identifiers\"] = identifyingValues;\n if (comp.monkeyId == undefined || comp.monkeyId == null) {\n comp[\"monkeyId\"] = identifyingValues[0];\n }\n }\n \n comp[\"className\"] = element.tagName;\n // comp[\"visible\"] = element.isVisible;\n comp[\"children\"] = MonkeyTalk.getComponentTreeJson2(element);\n \n return comp;\n }\n \n MonkeyTalk.getIdentifyingValues = function(element) {\n var keys = MonkeyTalk.keys;\n var identifyingValues = new Array();\n for ( var i = 0; i < keys.length; i++) {\n var key = keys[i];\n if (key == \"textContent\") {\n continue;\n }\n if (element.hasOwnProperty(key)) {\n var val = element[key];\n if (val != undefined && val != null && val.length>0) {\n identifyingValues[identifyingValues.length] = val;\n }\n }\n }\n return identifyingValues;\n }\n \n // ------------------------------------------------------\n // RECORDER \n // ------------------------------------------------------ \n \n MonkeyTalk.record = function (event, action) {\n console.log('MonkeyTalk Recording' + action);\n \n element = adapters.recordElement(event);\n \n var adapter = adapters.getAdapter(event);\n var mtc = adapter.getMTCommand(element, action);\n var mtaction = action;\n \n if (mtc.shouldIgnore == true) return;\n \n if (mtaction == null || mtaction == 'change' || mtc.action != null)\n mtaction = mtc.action;\n \n console.log('Element TagName:' + element.tagName);\n \n var json = {};\n json[\"component\"] = mtc.componentType;\n json[\"monkeyId\"] = mtc.monkeyId;\n json[\"action\"] = mtaction;\n json[\"args\"] = mtc.args;\n \n var jsonString = JSON.stringify(json);\n \n if (MonkeyTalk.isIos() == true) {\n // need to make this json \n xPathResult = 'ComponentType*' + mtc.componentType + ';MonkeyId*' + mtc.monkeyId + ';Action*' + mtaction + ';Args*' + mtc.args;\n sendToObjCLib(element.tagName, xPathResult);\n } else {\n console.log('mtrecorder:' + jsonString);\n //window.mtrecorder.recordJson(jsonString); \n }\n };\n \n MonkeyTalk.recordTap = function (x, y) {\n var action = 'Tap';\n console.log('MonkeyTalk Recording Tap');\n \n element = adapters.recordFromElement(document.elementFromPoint(x, y));\n \n if (element.tagName.toLowerCase() == 'iframe')\n element = adapters.elementInIframeAtPoint(element, x, y);\n \n var adapter = adapters.getAdapterForElement(element);\n var mtc = adapter.getMTCommand(element, action);\n var mtaction = action;\n \n if (mtc.shouldIgnore == true) return;\n \n if (mtaction == null || mtaction == 'change' || mtc.action != null)\n mtaction = mtc.action;\n \n console.log('Element TagName:' + element.tagName);\n \n if (mtc.componentType == undefined)\n mtc.componentType = 'View';\n \n var json = {};\n json[\"component\"] = mtc.componentType;\n json[\"monkeyId\"] = mtc.monkeyId;\n json[\"action\"] = mtaction;\n json[\"args\"] = mtc.args;\n \n var jsonString = JSON.stringify(json);\n \n if (MonkeyTalk.isIos() == true) {\n return jsonString;\n } else {\n //window.mtrecorder.recordJson(jsonString); \n console.log('mtrecorder:' + jsonString);\n }\n \n console.log('component: ' + mtc.componentType + ' monkeyId: ' + mtc.monkeyId + ' action: ' + mtaction + ' args: ' + mtc.args);\n //console.log ('{' + ''component':' + ''' + mtc.componentType + ''' + ',' + ''monkeyId':' + ''' + mtc.monkeyId + ''' + ',' + ''action':' + ''' + mtaction + ''' + ',' + ''args':' + ''' + mtc.args + ''' + '}'); \n };\n \n // ------------------------------------------------------ \n // SEND TO OBJC \n // ------------------------------------------------------ \n sendToObjCLib = function (key,val) {\n var iframe = document.createElement('IFRAME');\n iframe.setAttribute('src', key + ':monkeytalk' + val);\n document.documentElement.appendChild(iframe);\n iframe.parentNode.removeChild(iframe);\n iframe = null;\n };\n \n function MonkeyElement() {};\n var monkey = new MonkeyElement();\n \n // ------------------------------------------------------ \n // MT COMMAND\n // ------------------------------------------------------ \n var mt = {};\n mt.command = function(componentType, monkeyId, action, args) {\n this.componentType = componentType;\n this.monkeyId = monkeyId;\n this.action = action;\n this.args = args;\n this.shouldIgnore = false;\n };\n \n // ------------------------------------------------------ \n // ADAPTERS \n // ------------------------------------------------------ \n var adapters = {};\n \n // get the adapter for each element \n adapters.getAdapter = function(event) {\n element = adapters.recordElement(event);\n var tagName = element.tagName.toLowerCase();\n //console.log('element tag: ' + tagName); \n if (adapters[tagName]) {\n return new adapters[tagName](element);\n }\n \n return new adapters.tag(element);\n };\n \n // get the adapter for specific element \n adapters.getAdapterForElement = function(element) {\n var tagName = element.tagName.toLowerCase();\n //console.log('element tag: ' + tagName); \n if (adapters[tagName]) {\n return new adapters[tagName](element);\n }\n \n return new adapters.tag(element);\n };\n \n // get the element we want to record \n adapters.recordElement = function(event){\n element = event.target || event.currentTarget || event.srcElement;\n \n return adapters.recordFromElement(element);\n };\n \n // get the element we want to record \n adapters.recordFromElement = function(element){\n if (element.parentNode.tagName == undefined)\n return element;\n \n if (element.parentNode.tagName.toString().toLowerCase() == 'button') {\n console.log('Using Parent Tag');\n return element.parentNode;\n }\n \n return element;\n };\n \n adapters.elementInIframeAtPoint = function(frame, x, y){\n var rect = frame.getBoundingClientRect();\n x -= rect.left;\n y -= rect.top;\n var doc = (frame.contentWindow || frame.contentDocument);\n if (doc.document)\n doc = doc.document;\n \n var element = adapters.recordFromElement(doc.elementFromPoint(x, y));\n \n return element;\n };\n \n // ------------------------------------------------------ \n // DEFAULT ADAPTER \n // ------------------------------------------------------ \n adapters.tag = function(element) {\n if (!element) {\n return;\n }\n \n this.element = element;\n this.componentType = this.componentNames[element.tagName.toLowerCase()];\n this.monkeyId = this.mid(this.element, true);\n };\n \n // monkeyID \n adapters.tag.prototype.mid = function(e, findOrdinal) {\n var monkeyId;\n \n // do not record value as monkeyId for \n // ItemSelector, CheckBox or RadioButtons \n if (this.componentType != undefined &&\n this.componentType.toLowerCase() == 'table') {\n monkeyId = e.id || e.name || e.value\n || e.title || e.styleClass;\n }\n if (e.type == undefined) {\n monkeyId = e.getAttribute('id') || e.getAttribute('name') || e.getAttribute('value') || e.getAttribute('title') || e.getAttribute('class') || e.getAttribute('alt') || e.textContent || e.getAttribute('src') || e.getAttribute('href');\n } else if (e.type.toLowerCase() == 'radio') {\n monkeyId = e.name;\n } else if (e.tagName.toLowerCase() == 'select' || e.tagName.toLowerCase() == 'textarea' || e.tagName.toLowerCase() == 'input') {\n if (e.type.toLowerCase() != 'submit' || e.type.toLowerCase() != 'reset')\n monkeyId = e.id || e.name || e.title || e.getAttribute('class') || e.styleClass;\n else {\n monkeyId = e.id || e.name || e.value || e.textContent || e.title || e.getAttribute('class') || e.styleClass;\n }\n } else {\n monkeyId = e.getAttribute('id') || e.getAttribute('name') || e.getAttribute('value') || e.getAttribute('title') || e.getAttribute('class') || e.getAttribute('alt') || e.textContent || e.getAttribute('src') || e.getAttribute('href');\n }\n \n if (monkeyId == e.textContent) {\n var isTextContentLegal = monkeyId.substring(0,1) == ' ';\n isTextContentLegal = isTextContentLegal || monkeyId.substring(monkeyId.length-1,monkeyId.length) == ' ';\n isTextContentLegal = isTextContentLegal || (this.element.textContent == monkeyId && this.element.innerHTML.indexOf('<') !== -1);\n \n //if (!isTextContentLegal) \n }\n \n if (monkeyId == undefined)\n return null;\n \n // do not use ordinal mid for radiobuttons \n if (findOrdinal && this.componentType != undefined && this.componentType.toLowerCase() != 'radiobuttons')\n monkeyId = this.ordinalMid(e, monkeyId);\n \n return monkeyId;\n };\n \n // get ordinal monkey ID \n adapters.tag.prototype.ordinalMid = function(e, monkeyId) {\n // find all elements in the DOM with element e tag \n var elements = document.getElementsByTagName(e.tagName);\n var ordinalMid = 0;\n \n for (var i = 0; i < elements.length; i++) {\n var element = elements[i];\n var elementMid = this.mid(element, false);\n \n if (monkeyId == elementMid) {\n //console.log('elementMid: ' + e.textContent + ' current: ' + element.textContent + ' ordinal: ' + i); \n if (element == e) {\n //console.log('found element'); \n i = ordinalMid;\n break;\n } else\n ordinalMid++;\n }\n \n }\n \n // increment to make 1 based \n ordinalMid++;\n \n if (ordinalMid > 1)\n return monkeyId + '(' + ordinalMid + ')';\n \n return monkeyId;\n };\n \n adapters.tag.prototype.ordinal = function(e) {\n // Find all elements in the DOM \n var elements = document.getElementsByTagName('*');\n var ordinal = 0;\n \n for (var i = 0; i < elements.length; i++) {\n var element = elements[i];\n var isElementRadio = element.type == 'radio';\n var isElementCheckBox = element.type == 'checkbox';\n var isInput = (e.tagName == 'input' && (!e.type || e.type == 'text'));\n \n var isTagMatch = (element.tagName.toLowerCase() == e.tagName.toLowerCase());\n var isTypeMatch = (element.type == e.type);\n \n if (element == e) {\n i = elements.length;\n } else if (isTagMatch && isTypeMatch) {\n // Increment input only if it is not a checkbox or radio \n if (isInput && !isElementRadio && !isElementCheckBox) {\n ordinal++;\n //log('ordinal: ' + element.tagName + ' type: ' + element.type + ' ordinal: ' + ordinal + ' element: ' + e.type); \n } else if (!isInput || isElementRadio || isElementCheckBox) {\n ordinal++;\n }\n }\n }\n \n // Increment to make 1 based \n ordinal++;\n \n if (ordinal == 1)\n return '*';\n \n return '#' + ordinal.toString();\n };\n \n adapters.tag.prototype.getMTCommand = function(element, action) {\n var componentType = this.componentNames[element.tagName.toLowerCase()];\n var monkeyId = this.mid(element, true);\n var shouldFindOrdinal = !monkeyId;\n shouldFindOrdinal = shouldFindOrdinal || monkeyId.substring(0,1) == ' ';\n shouldFindOrdinal = shouldFindOrdinal || monkeyId.substring(monkeyId.length-1,monkeyId.length) == ' ';\n shouldFindOrdinal = shouldFindOrdinal || (element.textContent == monkeyId && element.innerHTML.indexOf('<') !== -1);\n \n if (shouldFindOrdinal)\n monkeyId = this.ordinal(this.element);\n \n var action = this.actionTypes[element.tagName.toString().toLowerCase()];\n var args = '';\n return new mt.command(componentType, monkeyId, action, args);\n };\n \n // ------------------------------------------------------ \n // COMPONENT TYPES \n // ------------------------------------------------------ \n adapters.tag.prototype.componentNames = {\n a : 'Link',\n button : 'Button',\n select : 'ItemSelector',\n table : 'Table',\n td : 'Table',\n th : 'Table',\n textarea : 'TextArea',\n input : 'Input',\n span : 'View',\n div : 'View',\n img : 'Image',\n textbox : 'TextArea',\n toolbarbutton : 'Browser',\n checkbox : 'CheckBox',\n radio : 'RadioButtons',\n text : 'Input',\n h1 : 'Label',\n h2 : 'Label',\n h3 : 'Label',\n h4 : 'Label',\n h5 : 'Label',\n h6 : 'Label',\n p : 'Label'\n };\n \n // ------------------------------------------------------ \n // ACTION TYPES \n // ------------------------------------------------------ \n adapters.tag.prototype.actionTypes = {\n a : 'tap',\n button : 'tap',\n span : 'tap',\n text : 'tap',\n label : 'tap',\n div: 'tap',\n img : 'tap',\n select : 'select',\n radio : 'select',\n h1 : 'tap',\n h2 : 'tap',\n h3 : 'tap',\n h4 : 'tap',\n h5 : 'tap',\n h6 : 'tap'\n };\n \n // ------------------------------------------------------ \n // INPUT ADAPTER \n // ------------------------------------------------------ \n adapters.input = function(element) {\n adapters.tag.call(this, element);\n this.componentType = this.componentNames[this.element.type.toLowerCase()];\n };\n \n adapters.input.prototype = new adapters.tag;\n \n adapters.input.prototype.getMTCommand = function(element, action) {\n var mtcommand = adapters.tag.prototype.getMTCommand.call(this, element, action);\n if (element.type.toLowerCase() == 'radio') {\n if (action.toLowerCase() != 'change') {\n mtcommand.shouldIgnore = true;\n return mtcommand;\n }\n mtcommand.action = 'select';\n mtcommand.componentType = 'RadioButtons';\n mtcommand.monkeyId = adapters.tag.prototype.mid.call(this,element,true);\n var value = element.value;\n mtcommand.args = value;\n } else if (element.type.toLowerCase() == 'checkbox') {\n if (action.toLowerCase() != 'change') {\n mtcommand.shouldIgnore = true;\n return mtcommand;\n }\n \n var checkbox = this.element;\n if (checkbox.checked)\n mtcommand.action = 'on';\n else\n mtcommand.action = 'off';\n mtcommand.componentType = 'CheckBox'\n } else if (element.type.toLowerCase() == 'button') {\n mtcommand.componentType = 'Button';\n mtcommand.monkeyId = element.value;\n } else {\n if (action != null && action.toLowerCase() == 'change') {\n // should not ignore this \n // need to fix keyup record to take multiple args \n mtcommand.shouldIgnore = true;\n mtcommand.action = 'enterText';\n mtcommand.args = element.value + ',enter';\n return mtcommand;\n }\n console.log('value: ' + element.value);\n mtcommand.args = element.value;\n }\n return mtcommand;\n };\n \n // ------------------------------------------------------ \n // SELECT ADAPTER \n // ------------------------------------------------------ \n adapters.select = function(element) {\n adapters.tag.call(this, element);\n this.componentType = this.componentNames[this.element.type.toLowerCase()];\n };\n \n adapters.select.prototype = new adapters.tag;\n \n adapters.select.prototype.getMTCommand = function(element, action) {\n var mtcommand = adapters.tag.prototype.getMTCommand.call(this, element, action);\n \n if (action.toLowerCase() != 'change') {\n mtcommand.shouldIgnore = true;\n return mtcommand;\n }\n \n mtcommand.args = element.value;\n \n return mtcommand;\n };\n \n // ------------------------------------------------------ \n // TEXTAREA ADAPTER \n // ------------------------------------------------------ \n adapters.textarea = function(element) {\n adapters.tag.call(this, element);\n this.componentType = this.componentNames[this.element.type.toLowerCase()];\n };\n \n adapters.textarea.prototype = new adapters.tag;\n \n adapters.textarea.prototype.getMTCommand = function(element, action) {\n var mtcommand = adapters.tag.prototype.getMTCommand.call(this, element, action);\n \n if (action != null && action.toLowerCase() == 'change') {\n // should not ignore this \n // need to fix keyup record to take multiple args \n mtcommand.shouldIgnore = true;\n mtcommand.action = 'enterText';\n mtcommand.args = element.value + ',enter';\n return mtcommand;\n }\n \n mtcommand.args = element.value;\n \n return mtcommand;\n };\n \n // ------------------------------------------------------ \n // TABLE ADAPTER \n // ------------------------------------------------------ \n adapters.table = function(element) {\n adapters.tag.call(this, element);\n };\n \n adapters.table.prototype = new adapters.tag;\n \n adapters.table.prototype.getMTCommand = function(command, target, value) {\n var mtcommand = adapters.tag.prototype.getMTCommand.call(this, command, target, value);\n var child = this.element;\n var table = child;\n var tr = null;\n var cell = null;\n \n while (child.tagName.toLowerCase() != \"table\") {\n if (child.tagName.toLowerCase() == \"tr\")\n tr = child;\n else if (child.tagName.toLowerCase() == \"td\" ||\n child.tagName.toLowerCase() == \"th\")\n cell = child;\n \n child = child.parentNode;\n table = child;\n }\n \n if (!tr) {\n console.log('tr not found');\n return mtcommand;\n }\n \n console.log('tr found: ' + tr.textContent);\n \n // Set monkeyId to that of table \n // to avoid recording monkeyId of tr, td, etc. monkeyIds \n mtcommand.monkeyId = adapters.tag.prototype.mid.call(this,table,true);\n \n if (!mtcommand.monkeyId)\n mtcommand.monkeyId = adapters.tag.prototype.ordinal.call(this,table);\n \n if (tr.textContent.length > 0) {\n console.log('set action select');\n mtcommand.action = 'select';\n mtcommand.args = tr.textContent;\n } else {\n var row = tr.rowIndex + 1;\n mtcommand.action = 'selectIndex';\n \n if (cell) {\n var column = Array.prototype.indexOf.call(tr.childNodes, cell);\n \n if (column == 0)\n column++;\n \n mtcommand.args = row + \"','\" + column;\n } else {\n mtcommand.args = row;\n }\n }\n \n return mtcommand;\n };\n \n // ------------------------------------------------------ \n // TR ADAPTER \n // ------------------------------------------------------ \n adapters.tr = function(element) {\n adapters.table.call(this, element);\n };\n \n adapters.tr.prototype = new adapters.table;\n \n // ------------------------------------------------------ \n // TD ADAPTER \n // ------------------------------------------------------ \n adapters.td = function(element) {\n adapters.table.call(this, element);\n };\n \n adapters.td.prototype = new adapters.table;\n \n // ------------------------------------------------------ \n // TH ADAPTER \n // ------------------------------------------------------ \n adapters.th = function(element) {\n adapters.table.call(this, element);\n };\n \n adapters.th.prototype = new adapters.table;\n \n // ------------------------------------------------------ \n // SETUP DOCUMENT \n // ------------------------------------------------------ \n // add listeners for elements in iframes \n var mtframes = document.getElementsByTagName('iframe');\n \n for (var i = 0; i < mtframes.length; i++) {\n var mtframe = mtframes[i];\n //console.log('element: ' + mtframe.tagName + ':' + mtframe.getAttribute('id')); \n \n var mtdoc = (mtframe.contentWindow || mtframe.contentDocument);\n if (mtdoc.document)\n mtdoc = mtdoc.document;\n \n mtdoc.onkeyup = function (event) { MonkeyTalk.record(event, 'enterText')};\n mtdoc.onchange = function (event) {MonkeyTalk.record(event, 'change')};\n mtdoc.onclick = function (event) {MonkeyTalk.record(event, 'tap')};\n }\n \n // handle keyup and change events via js \n // taps handled in objc from gestures \n document.onkeyup = function (event) { MonkeyTalk.record(event, 'enterText')};\n document.onchange = function (event) {MonkeyTalk.record(event, 'change')};\n \n if (MonkeyTalk.isIos() != true) {\n document.onclick = function (event) {MonkeyTalk.record(event, 'tap')};\n }\n \n}\n "
